<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Isulew&#39;s Blog</title>
    <link>https://netcookies.github.io/b/tags/anyconnect/index.xml</link>
    <description>Recent content on Isulew&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://netcookies.github.io/b/tags/anyconnect/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Raspberry Pi 搭建Anyconnect VPN</title>
      <link>https://netcookies.github.io/b/blog/raspberry-pi-%E6%90%AD%E5%BB%BAanyconnect-vpn/</link>
      <pubDate>Tue, 29 Sep 2015 23:12:00 +0800</pubDate>
      
      <guid>https://netcookies.github.io/b/blog/raspberry-pi-%E6%90%AD%E5%BB%BAanyconnect-vpn/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Debian &amp;gt;=7, ubuntu &amp;gt;=14.04 的可以直接使用这个脚本一键安装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://github.com/fanyueciyuan/eazy-for-ss/tree/master/ocservauto&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 比较特殊点有些地方需要改进，我们改为手工编译，原始脚本的链接是在&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://github.com/humiaozuzu/ocserv-build/blob/master/build-src.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;稍加修改，使用最新版本的ocserv-0.10.8，编译liblz4，开启Compression(lz4)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

apt-get install -y build-essential autogen pkg-config texinfo libhogweed2 libgmp3-dev gettext
apt-get install -y libxml2-dev libgeos++-dev libpq-dev libbz2-dev libreadline-dev libtool automake
apt-get install -y unbound-anchor
mkdir /etc/unbound
unbound-anchor -a &amp;quot;/etc/unbound/root.key&amp;quot;

mkdir -p /opt/src

cd /opt/src
wget http://www.lysator.liu.se/~nisse/archive/nettle-2.7.tar.gz
wget ftp://ftp.gnu.org/gnu/nettle/nettle-3.2.tar.gz
tar xvzf nettle-3.2.tar.gz
cd /opt/src/nettle-3.2
./configure --enable-shared --prefix=/opt/local --disable-assembler
make
make install

cd /opt/src
wget http://ftp.gnu.org/gnu/libtasn1/libtasn1-4.8.tar.gz
tar xvzf libtasn1-4.8.tar.gz
cd /opt/src/libtasn1-4.8
./configure --prefix=/opt/local
make
make install

cd /opt/src
wget ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz
tar xvzf libffi-3.2.1.tar.gz
cd /opt/src/libffi-3.2.1
./configure --prefix=/opt/local
make
make install

cd /opt/src
wget https://p11-glue.freedesktop.org/releases/p11-kit-0.23.2.tar.gz
tar xvzf p11-kit-0.23.2.tar.gz
cd /opt/src/p11-kit-0.23.2
PKG_CONFIG_PATH=/opt/local/lib/pkgconfig ./configure --prefix=/opt/local
make
make install

cd /opt/src
wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.4/gnutls-3.4.9.tar.xz
tar xvfJ gnutls-3.4.9.tar.xz
cd /opt/src/gnutls-3.4.9
PKG_CONFIG_PATH=/opt/local/lib/pkgconfig ./configure --enable-shared --prefix=/opt/local
make
make install

cd /opt/src
mkdir lz4
LZ4_VERSION=`curl -s &amp;quot;https://github.com/Cyan4973/lz4/releases/latest&amp;quot; | sed -n &#39;s/^.*tag\/\(.*\)&amp;quot;.*/\1/p&#39;` 
curl -SL &amp;quot;https://github.com/Cyan4973/lz4/archive/$LZ4_VERSION.tar.gz&amp;quot; -o lz4.tar.gz
tar -xf lz4.tar.gz -C lz4 --strip-components=1 
cd lz4 
make -j&amp;quot;$(nproc)&amp;quot; &amp;amp;&amp;amp; make install
cd ..
ln -sf /usr/local/lib/liblz4.* /usr/lib/

cd /opt/src
wget https://www.openssl.org/source/openssl-1.0.1s.tar.gz
tar xvzf openssl-1.0.1s.tar.gz
cd /opt/src/openssl-1.0.1s
./config
make depend
make
make install

cd /opt/src
wget https://github.com/netcookies/ocserv-backup/raw/master/ocserv-0.10.8.tar.xz
tar xvf ocserv-0.10.8.tar.xz
cd /opt/src/ocserv-0.10.8
PKG_CONFIG_PATH=/opt/local/lib/pkgconfig ./configure --prefix=/opt/ocserv
LD_LIBRARY_PATH=/opt/local/lib make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;编译安装成功后，运行以下命令测试下是否安装成功&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;LD_LIBRARY_PATH=/opt/local/lib /opt/ocserv/sbin/ocserv --help&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;附上一些配置文件：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/opt/ocserv/etc/config&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#auth = &amp;quot;certificate&amp;quot;
auth = &amp;quot;plain[passwd=/opt/ocserv/etc/ocpasswd]&amp;quot;
enable-auth = certificate
max-clients = 1024
max-same-clients = 0
tcp-port = 4443
udp-port = 4443
keepalive = 32400
dpd = 120
mobile-dpd = 1800
try-mtu-discovery = true
compression = true
server-cert = /opt/ocserv/ca/server-cert.pem
server-key = /opt/ocserv/ca/server-key.pem
ca-cert = /opt/ocserv/ca/ca-cert.pem
cert-user-oid = 2.5.4.3
#listen-host-is-dydns = true

tls-priorities = &amp;quot;NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0&amp;quot;
auth-timeout = 40
min-reauth-time = 120
cookie-timeout = 300
deny-roaming = false
rekey-time = 172800
rekey-method = ssl
use-utmp = true
use-occtl = true
pid-file = /var/run/ocserv.pid
socket-file = /var/run/ocserv-socket
run-as-user = nobody
run-as-group = daemon
device = vpns
output-buffer = 23000
# default-domain = example.com
ipv4-network = 10.0.2.0
ipv4-netmask = 255.255.255.0
dns = 8.8.8.8
dns = 8.8.4.4
ping-leases = false
cisco-client-compat = true

route = 10.20.30.0/255.255.255.0 #vpn服务器端内网的网段
no-route = 0.0.0.0/0.0.0.0 #默认其它流量不指向vpn,只当访问对端内网时指向vpn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;no-route和router按实际需求添加&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;/opt/ocserv/etc/ocserv-up.sh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

#vars
OCSERV_CONFIG=&amp;quot;/opt/ocserv/etc/config&amp;quot;

# turn on IP forwarding
#sysctl -w net.ipv6.conf.all.forwarding=1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sysctl -w net.ipv4.ip_forward=1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1

#get gateway and profiles
gw_intf_oc=`ip route show 0/0 | sort -k 7 | head -n 1 | sed -n &#39;s/^default.* dev \([^ ]*\).*/\1/p&#39;`
ocserv_tcpport=`sed -n &#39;s/^tcp-.*=[ \t]*//p&#39; $OCSERV_CONFIG`
ocserv_udpport=`sed -n &#39;s/^udp-.*=[ \t]*//p&#39; $OCSERV_CONFIG`
ocserv_ip4_work_mask=`sed -n &#39;s/^ipv4-.*=[ \t]*//p&#39; $OCSERV_CONFIG|sed &#39;N;s|\n|/|g&#39;`

# turn on NAT over default gateway and VPN
if !(iptables-save -t nat | grep -q &amp;quot;$gw_intf_oc (ocserv)&amp;quot;); then
iptables -t nat -A POSTROUTING -s $ocserv_ip4_work_mask ! -d $ocserv_ip4_work_mask -m comment --comment &amp;quot;$gw_intf_oc (ocserv)&amp;quot; -j MASQUERADE
fi

if !(iptables-save -t filter | grep -q &amp;quot;$gw_intf_oc (ocserv2)&amp;quot;); then
iptables -A FORWARD -d $ocserv_ip4_work_mask -m comment --comment &amp;quot;$gw_intf_oc (ocserv2)&amp;quot; -j ACCEPT
fi

if !(iptables-save -t filter | grep -q &amp;quot;$gw_intf_oc (ocserv3)&amp;quot;); then
iptables -A INPUT -p tcp --dport $ocserv_tcpport -m comment --comment &amp;quot;$gw_intf_oc (ocserv3)&amp;quot; -j ACCEPT
fi

if [ &amp;quot;$ocserv_udpport&amp;quot; != &amp;quot;&amp;quot; ]; then
    if !(iptables-save -t filter | grep -q &amp;quot;$gw_intf_oc (ocserv4)&amp;quot;); then
        iptables -A INPUT -p udp --dport $ocserv_udpport -m comment --comment &amp;quot;$gw_intf_oc (ocserv4)&amp;quot; -j ACCEPT
    fi
fi

if !(iptables-save -t filter | grep -q &amp;quot;$gw_intf_oc (ocserv5)&amp;quot;); then
iptables -A FORWARD  -s $ocserv_ip4_work_mask -m state --state RELATED,ESTABLISHED -m comment --comment &amp;quot;$gw_intf_oc (ocserv5)&amp;quot; -j ACCEPT
fi

# turn on MSS fix
# MSS = MTU - TCP header - IP header
if !(iptables-save -t mangle | grep -q &amp;quot;$gw_intf_oc (ocserv6)&amp;quot;); then
iptables -t mangle -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -m comment --comment &amp;quot;$gw_intf_oc (ocserv6)&amp;quot; -j TCPMSS --clamp-mss-to-pmtu
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/opt/ocserv/etc/ocserv-down.sh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# uncomment if you want to turn off IP forwarding
# sysctl -w net.ipv4.ip_forward=0

#del iptables

iptables-save | grep &#39;ocserv&#39; | sed &#39;s/^-A P/iptables -t nat -D P/&#39; | sed &#39;s/^-A FORWARD -p/iptables -t mangle -D FORWARD -p/&#39; | sed &#39;s/^-A/iptables -D/&#39; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/init.d/ocserv&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
### BEGIN INIT INFO
# Provides:          ocserv
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ocserv
# Description:       OpenConnect VPN server compatible with
#                    Cisco AnyConnect VPN.
### END INIT INFO

# Author: liyangyijie &amp;lt;liyangyijie@gmail.com&amp;gt;

# PATH should only include /usr/ if it runs after the mountnfs.sh script
PATH=/opt/ocserv/sbin:/opt/ocserv/bin:/sbin:/usr/sbin:/bin:/usr/bin
DESC=ocserv
NAME=ocserv
DAEMON=/opt/ocserv/sbin/ocserv
DAEMON_ARGS=&amp;quot;&amp;quot;
CONFFILE=&amp;quot;/opt/ocserv/etc/config&amp;quot;
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
SERVER_UP=&amp;quot;/opt/ocserv/etc/ocserv-up.sh&amp;quot;
SERVER_DOWN=&amp;quot;/opt/ocserv/etc/ocserv-down.sh&amp;quot;

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

: ${USER:=&amp;quot;root&amp;quot;}
: ${GROUP:=&amp;quot;root&amp;quot;}

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (&amp;gt;= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Show details
VERBOSE=&amp;quot;yes&amp;quot;

#
# Function that starts the daemon/service
#
do_start()
{
    # Add server up script
    [ -x ${SERVER_UP} ] &amp;amp;&amp;amp; . ${SERVER_UP}

    # Take care of pidfile permissions
    mkdir /var/run/$NAME 2&amp;gt;/dev/null || true
    chown &amp;quot;$USER:$GROUP&amp;quot; /var/run/$NAME
    export LD_LIBRARY_PATH=/opt/local/lib
    
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $USER:$GROUP --exec $DAEMON --test &amp;gt; /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $USER:$GROUP --exec $DAEMON -- \
        -c &amp;quot;$CONFFILE&amp;quot; $DAEMON_ARGS \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Add server down script
    [ -x ${SERVER_DOWN} ] &amp;amp;&amp;amp; . ${SERVER_DOWN}

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=KILL/5 --pidfile $PIDFILE --exec $DAEMON
    RETVAL=&amp;quot;$?&amp;quot;
    [ &amp;quot;$RETVAL&amp;quot; = 2 ] &amp;amp;&amp;amp; return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon --stop --quiet --oknodo --retry=KILL/5 --exec $DAEMON
    [ &amp;quot;$?&amp;quot; = 2 ] &amp;amp;&amp;amp; return 2
    # Many daemons don&#39;t delete their pidfiles when they exit.
    rm -f $PIDFILE
    return &amp;quot;$RETVAL&amp;quot;
}


case &amp;quot;$1&amp;quot; in
    start)
        [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_daemon_msg &amp;quot;Starting $DESC &amp;quot; &amp;quot;$NAME&amp;quot;
        do_start
        case &amp;quot;$?&amp;quot; in
            0|1) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0 ;;
            2) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 1 ;;
        esac
    ;;
    stop)
    [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_daemon_msg &amp;quot;Stopping $DESC&amp;quot; &amp;quot;$NAME&amp;quot;
    do_stop
    case &amp;quot;$?&amp;quot; in
    0|1) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0 ;;
        2) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 1 ;;
    esac
    ;;
    debug)
        DAEMON_ARGS=&amp;quot;-f -d 2&amp;quot;
        [ &amp;quot;$2&amp;quot; != &amp;quot;&amp;quot; ] &amp;amp;&amp;amp; DAEMON_ARGS=&amp;quot;-f -d $2&amp;quot;
        [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_daemon_msg &amp;quot;Starting $DESC &amp;quot; &amp;quot;$NAME&amp;quot;
        do_start
        case &amp;quot;$?&amp;quot; in
            0|1) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0 ;;
            2) [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 1 ;;
        esac
    ;;
    status)
        status_of_proc &amp;quot;$DAEMON&amp;quot; &amp;quot;$NAME&amp;quot; &amp;amp;&amp;amp; exit 0 || exit $?
    ;;
    restart|force-reload)
        log_daemon_msg &amp;quot;Restarting $DESC&amp;quot; &amp;quot;$NAME&amp;quot;
        do_stop
        case &amp;quot;$?&amp;quot; in
            0|1)
                do_start
                case &amp;quot;$?&amp;quot; in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
            ;;
            *)
            # Failed to stop
            log_end_msg 1
            ;;
        esac
    ;;
    *)
    echo &amp;quot;Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|debug}&amp;quot; &amp;gt;&amp;amp;2
    exit 3
    ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;开机启动服务&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x /etc/init.d/ocserv
update-rc.d ocserv defaults 99
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果要使用证书认证，可以使用以下脚本一键生成，将生成的p12后缀文件在客户端导入即可&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

AUTHOR=&amp;quot;Maple&amp;quot;
VPN=&amp;quot;Cisco SG for Maple&amp;quot;
DOMAIN=&amp;quot;miao.hu&amp;quot;
CLIENT=&amp;quot;user&amp;quot;

cd /opt/ocserv
mkdir ca
cd ca

cat &amp;lt;&amp;lt; EOF &amp;gt; ca.tmpl
cn = &amp;quot;$VPN&amp;quot;
organization = &amp;quot;$AUTHOR&amp;quot;
serial = 1
expiration_days = 1000
ca
signing_key
cert_signing_key
crl_signing_key
EOF

cat &amp;lt;&amp;lt; EOF &amp;gt; server.tmpl
cn = &amp;quot;$DOMAIN&amp;quot;
organization = &amp;quot;$AUTHOR&amp;quot;
serial = 2
expiration_days = 1000
signing_key
encryption_key
tls_www_server
EOF

certtool --generate-privkey --outfile ca-key.pem
certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem
certtool --generate-privkey --outfile server-key.pem
certtool --generate-certificate --load-privkey server-key.pem \
--load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem \
--template server.tmpl --outfile server-cert.pem

cat &amp;lt;&amp;lt; EOF &amp;gt; user.tmpl
cn = &amp;quot;$CLIENT&amp;quot;
serial = 1824
expiration_days = 1000
signing_key
tls_www_client
EOF

certtool --generate-privkey --outfile user-key.pem
certtool --generate-certificate --load-privkey user-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template user.tmpl --outfile user-cert.pem
openssl pkcs12 -export -clcerts -in user-cert.pem -inkey user-key.pem -out user.p12
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;其它问题： 如果ocserv所安装的服务器采用wlan0连接外网的话，可能会出现一启用vpn网络就断开的情况，则需要编辑&lt;code&gt;/etc/defaults/ifplugd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
INTERFACES=&amp;quot;auto&amp;quot;
HOTPLUG_INTERFACES=&amp;quot;eth0 wlan0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;参考：&lt;/em&gt;
&lt;a href=&#34;https://github.com/fanyueciyuan/eazy-for-ss/tree/master/ocservauto&#34;&gt;fanyueciyuan/eazy-for-ss&lt;/a&gt;
&lt;a href=&#34;https://github.com/humiaozuzu/ocserv-build&#34;&gt;humiaozuzu/ocserv-build&lt;/a&gt;
&lt;a href=&#34;http://www.boxtricks.com/raspberry-pi-drops-wireless-connect-after-openvpn-is-started/&#34;&gt;http://www.boxtricks.com/raspberry-pi-drops-wireless-connect-after-openvpn-is-started/&lt;/a&gt;
&lt;a href=&#34;http://superuser.com/questions/513351/debian-eth0-to-wlan0-forwarding-with-openvpn&#34;&gt;http://superuser.com/questions/513351/debian-eth0-to-wlan0-forwarding-with-openvpn&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>